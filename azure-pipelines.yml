trigger:
- master

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'MyAzureServiceConnection'
  
  # Web app name
  webAppName: 'java-spring-boot'

  # Agent pool name (self-hosted agent pool)
  agentPoolName: 'my-personal-computer'  # Replace with your self-hosted agent pool name

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: MavenPackageAndPublishArtifacts
    displayName: Maven Package and Publish Artifacts
    pool:
      name: $(agentPoolName)  # Use self-hosted agent pool
    
    steps:
    - task: Maven@3  # Use Maven@3 as it's supported by Azure DevOps
      displayName: 'Maven Package'
      inputs:
        mavenPomFile: 'pom.xml'  # Ensure this path is correct
        options: '-DskipTests=true'  # Skip tests during build (you can remove this if you want to run tests)

    - task: CopyFiles@2
      displayName: 'Copy Files to artifact staging directory'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: '**/target/*.?(war|jar)'  # Ensure that the pattern matches your output
        TargetFolder: $(Build.ArtifactStagingDirectory)

    - task: PublishPipelineArtifact@0
      displayName: 'Publish pipeline artifacts'
      inputs:
        targetPath: $(Build.ArtifactStagingDirectory)

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployLinuxWebApp
    displayName: Deploy Linux Web App
    environment: 'development'
    pool:
      name: $(agentPoolName)  # Use self-hosted agent pool
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@1
            displayName: 'Download Pipeline Artifact'
            inputs:
              buildType: 'current'

          - task: AzureWebApp@1
            displayName: 'Azure Web App Deploy: gs-spring-boot'
            inputs:
              azureSubscription: $(azureSubscription)
              appType: webAppLinux
              appName: $(webAppName)
              package: '$(System.ArtifactsDirectory)/drop/**/*.jar'  # Ensure the correct path to the artifact
